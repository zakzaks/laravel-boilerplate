services:
  app:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
    container_name: app-${APP_NAME}
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
    networks:
      - network

  node:
    image: node:20-alpine
    container_name: node-${APP_NAME}
    working_dir: /var/www
    volumes:
      - ./:/var/www
    networks:
      - network
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: ["tail", "-f", "/dev/null"]

  nginx:
    image: nginx:alpine
    container_name: nginx-${APP_NAME}
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/certs:/etc/nginx/certs
    networks:
      - network

  db:
    image: mysql:8.0
    container_name: db-${APP_NAME}
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - network
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    container_name: redis-${APP_NAME}
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - network

  queue:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: queue-${APP_NAME}
    depends_on:
      - app
      - redis
      - db
    volumes:
      - ./:/var/www
    working_dir: /var/www
    command: php artisan queue:work redis --sleep=3 --tries=3 --timeout=90
    networks:
      - network

volumes:
  mysql-data:
    name: mysql-data-${APP_NAME}
    driver: local

networks:
  network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET}
